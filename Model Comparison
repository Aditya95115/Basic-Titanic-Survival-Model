# File Import and neccesary functions

%cd C:\Users\91901\Desktop\Aditya\Learning\LinkedIN\Applied Machin Learning Algorithms
import joblib
import pandas as pd
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import GridSearchCV

from time import time

te_features=pd.read_csv('test_features.csv')
te_labels = pd.read_csv('test_labels.csv')
val_features=pd.read_csv('val_features.csv')
val_labels = pd.read_csv('val_labels.csv')
def print_results(results):
    print('BEST PARAMS: {}\n'.format(results.best_params_))

    means = results.cv_results_['mean_test_score']
    stds = results.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, results.cv_results_['params']):
        print('{} (+/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))
        
    models ={}
for mdl in ['LR','svm','MLP','RFC','GB']:
    models[mdl] = joblib.load('{}_model.pkl'.format(mdl))
    
    # Model Comparison using test and validation data
    
    def evaluate_model(name, model, features, labels):
    start=time()
    pred =model.predict(features)
    end= time()
    accuracy= round(accuracy_score(labels,pred),3)
    precision= round(precision_score(labels,pred),3)
    recall= round(recall_score(labels,pred),3)
    print('{}--Accuracy:{}/Precision:{}/Recall:{}/Latency:{}ms'.format(name,accuracy,precision,recall
                                                                      ,round((end-start),3)))
                                                                      
    for name, mdl in models.items():
    evaluate_model(name, mdl, val_features, val_labels)
    
    for name, mdl in models.items():
    evaluate_model(name, mdl, te_features, te_labels)
    evaluate_model('Gradient Boosted Trees',models['GB'],te_features,te_labels)
