
import joblib
import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import GridSearchCV
import warnings
warnings.filterwarnings('ignore',category= FutureWarning)
warnings.filterwarnings('ignore',category= DeprecationWarning)

tr_features=pd.read_csv('train_features.csv')
tr_labels = pd.read_csv('train_labels.csv')

def print_results(results):
    print('BEST PARAMS: {}\n'.format(results.best_params_))

    means = results.cv_results_['mean_test_score']
    stds = results.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, results.cv_results_['params']):
        print('{} (+/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))

mlp= MLPClassifier(max_iter=500)
parameters ={
    'hidden_layer_sizes':[(10,),(50,),(100,)],
    'activation':['relu','tanh','logistic'],
    'learning_rate':['constant','adaptive','invscaling']
}
cv= GridSearchCV(mlp,parameters,cv=5)

cv.fit(tr_features,tr_labels.values.ravel())
print_results(cv)

joblib.dump(cv.best_estimator_,'MLP_model.pkl')
